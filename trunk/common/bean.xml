<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
	<!-- 读取资源文件 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:config.properties</value>
			</list>
		</property>
		<property name="fileEncoding" value="utf-8" />
	</bean>
	<!-- <context:property-placeholder location="classpath:config.properties" 
		/> -->
	<!-- dbcp配置数据源使用 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
	</bean>
	<!-- JNDI配置暂不使用 -->
	<!-- <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> 
		<property name="jndiName" value="java:comp/env/" /> </bean> -->
	<!-- ======================事务相关配置===================================== -->
	<!-- 配置事务 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	<!-- 事务属性 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="search*" read-only="true" propagation="SUPPORTS"/>
			<tx:method name="find*" read-only="true" propagation="SUPPORTS"/>
			<tx:method name="*" read-only="false" propagation="REQUIRED"/>
		</tx:attributes>
	</tx:advice>
	<!-- 事务关注点在service层 -->
	<aop:config>
		<aop:pointcut id="service" expression="execution(* cn.ziroom.*.service.*.*(..))"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="service"/>
	</aop:config>
	<!-- ============================mybatis相关配置============================== -->
	<!-- sqlsessionfactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<!--  
		<property name="mapperLocations" value="classpath*:/**/*Mapper.xml"/>
		-->
	</bean>
	<!-- sql mapper抽象类配置，其它的mapper配置都集成它 -->
	<bean id="generalMapper" class="org.mybatis.spring.mapper.MapperFactoryBean" abstract="true" lazy-init="true">
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	
	<!-- ===========================sql mapper aop配置================================ -->
  
	<bean id="afterReturning" class="com.sunshulin.spring.MapperAfterReturningAdvice" />

	<!-- *Mapper.java切入点 -->
 
	<aop:config>
		<aop:pointcut id="pointMapper" expression="execution(* com.bhms.module.*.*.mapper.*Mapper.*(..))"/>
		<aop:advisor advice-ref="afterReturning" pointcut-ref="pointMapper" />
	</aop:config>

</beans>